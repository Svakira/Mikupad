export interface SVResizeObserverEntrie {
    /**
     * A reference to the `Element` being observed.
     */
    target: Element;
    /**
     * Current `scrollWidth` of the element.
     */
    scrollWidth: number;
    /**
     * Current `scrollHeight` of the element.
     */
    scrollHeight: number;
    /**
     * Previous `scrollWidth` of the element.
     */
    previousScrollWidth: number;
    /**
     * Previous `scrollHeight` of the element.
     */
    previousScrollHeight: number;
}
export interface SVObserveOptions {
    /**
     * Specifies the direction in which to listen for changes.
     */
    direction?: 'x' | 'y';
}
/**
 * The function called whenever an observed resize occurs.
 *
 * @param  entries - An array of `SVResizeObserverEntrie` objects that can be used to access the new dimensions of the element after each change.
 * @param  observer - A reference to the `SVResizeObserver` itself.
 */
export declare type SVResizeCallback = (entries: Readonly<SVResizeObserverEntrie>[], observer: SVResizeObserver) => void;
export declare class SVResizeObserver {
    private callback;
    private dataset;
    constructor(callback: SVResizeCallback);
    /**
     * Observing the specified `Element`.
     *
     * @param target - A reference to an `Element` to be observed.
     */
    observe(target: Element, options?: SVObserveOptions): void;
    /**
     * Ends the observing of a specified `Element`.
     *
     * @param target - A reference to an `Element` to be unobserved.
     */
    unobserve(target: Element): void;
    /**
     * Unobserves all observed `Element` targets.
     */
    disconnect(): void;
    private _checkChange;
}
